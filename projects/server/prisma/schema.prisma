// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique @db.VarChar(255)

  sessions             Session[]
  userRoles            UserRole[]
  gameSubmissions      GameSubmission[]
  authenticationTokens AuthenticationToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationToken {
  id    String @id @default(uuid()) @db.Uuid
  token String @unique @db.VarChar(255)
  email String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthenticationToken {
  id     String @id @default(uuid()) @db.Uuid
  token  String @unique @db.VarChar(255)
  userId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  token  String @unique @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  role   Role

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Event {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255)

  gameSubmissions GameSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSubmission {
  id           String  @id @default(uuid()) @db.Uuid
  eventId      String  @db.Uuid
  submitUserId String? @db.Uuid

  event      Event @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  submitUser User? @relation(fields: [submitUserId], references: [id], onUpdate: SetNull, onDelete: SetNull)

  gameSubmissionAvailableTimes GameSubmissionAvailableTime[]
  gameSubmissionGames          GameSubmissionGame[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSubmissionAvailableTime {
  id               String   @id @default(uuid()) @db.Uuid
  gameSubmissionId String   @db.Uuid
  startTime        DateTime
  endTime          DateTime

  gameSubmission GameSubmission @relation(fields: [gameSubmissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSubmissionGame {
  id               String @id @default(uuid()) @db.Uuid
  gameSubmissionId String @db.Uuid
  title            String
  category         String
  platform         String
  description      String

  gameSubmission GameSubmission @relation(fields: [gameSubmissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  gameSubmissionCategories GameSubmissionCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameSubmissionCategory {
  id                   String @id @default(uuid()) @db.Uuid
  gameSubmissionGameId String @db.Uuid
  name                 String
  estimatedTime        Int
  videoUrl             String
  description          String

  gameSubmissionGame GameSubmissionGame @relation(fields: [gameSubmissionGameId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
